# -*- coding: utf-8 -*-
"""Inference.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11AMvthbES3rNMiLSdK69M8G4123GouyU
"""

import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.transforms as transforms
from PIL import Image


class RNN(nn.Module):
    def __init__(self):
        super(RNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 16, 5, 1)
        self.conv2 = nn.Conv2d(16, 32, 5, 1)
        self.conv3 = nn.Conv2d(32, 64, 5, 1)
        self.conv4 = nn.Conv2d(64, 128, 5, 1)
        self.conv5 = nn.Conv2d(128, 256, 5, 1)
        self.conv6 = nn.Conv2d(256, 512, 5, 1)
        self.conv7 = nn.Conv2d(512, 1024, 5, 1)

        self.rnn = nn.LSTM(
            input_size=208896,
            hidden_size=128,
            num_layers=1,
            batch_first=True)
        # self.linear = nn.Linear(64, 10)
        # self.dropout1 = nn.Dropout2d(0.25)
        # self.dropout2 = nn.Dropout2d(0.5)
        self.fc1 = nn.Linear(128, 556)

    # x represents our data
    def forward(self, x):
        # Pass data through conv1
        x = self.conv1(x)
        # Use the rectified-linear activation function over x
        x = F.relu(x)

        x = self.conv2(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.conv3(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.conv4(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.conv5(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.conv6(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.conv7(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        # Pass data through dropout1
        # x = self.dropout1(x)
        # Flatten x with start_dim=1
        x = torch.flatten(x, 1)
        # Pass data through fc1
        x, _ = self.rnn(x)
        x = self.fc1(x)
        x = F.relu(x)
        # Apply softmax to x
        # output = F.log_softmax(x, dim=1)
        output = x
        return output


class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 16, 5, 1)
        self.conv2 = nn.Conv2d(16, 32, 5, 1)
        self.conv3 = nn.Conv2d(32, 64, 5, 1)
        self.conv4 = nn.Conv2d(64, 128, 5, 1)
        self.conv5 = nn.Conv2d(128, 256, 5, 1)
        self.conv6 = nn.Conv2d(256, 512, 5, 1)
        self.conv7 = nn.Conv2d(512, 1024, 5, 1)
        self.fc1 = nn.Linear(208896, 556)

    # x represents our data
    def forward(self, x):
        # Pass data through conv1
        x = self.conv1(x)
        # Use the rectified-linear activation function over x
        x = F.relu(x)

        x = self.conv2(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.conv3(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.conv4(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.conv5(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.conv6(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.conv7(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        # Flatten x with start_dim=1
        x = torch.flatten(x, 1)
        # Pass data through fc1
        x = self.fc1(x)
        x = F.relu(x)
        output = x
        return output


im = Image.open('./dataset/Case_15-05.tif')
imarray = np.array(im)

transform = transforms.Compose(
    [
        transforms.ToTensor(),
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),
    ]
)
input = transform(imarray)
input = torch.unsqueeze(input, 0)


PATH = "./cnn.pth.tar"
cnn = CNN()

torch.save(cnn.state_dict(), PATH)

model = CNN()
model.load_state_dict(torch.load(PATH))
model.eval()
out_cnn = model(input)


PATH = "./rnn.pth.tar"
rnn = RNN()
# Save
torch.save(rnn.state_dict(), PATH)

# Load
model = RNN()
model.load_state_dict(torch.load(PATH))
#  print(model.state_dict())
model.eval()
out_rnn = model(input)

count_cnn = 0

output_cnn = out_cnn.tolist()
for out1 in output_cnn:
    for out2 in out1:
        if out2 == 0:
            count_cnn += 1
print(count_cnn)
print(556 - count_cnn)

count_rnn = 0

output_rnn = out_rnn.tolist()
for out1 in output_rnn:
    for out2 in out1:
        if out2 == 0:
            count_rnn += 1
print(count_rnn)
print(556 - count_rnn)
